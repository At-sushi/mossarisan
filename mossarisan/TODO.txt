STLを使って１から作り直す予定（ほんとかよ）。

RangeCoder部分
・PPMなんか使ってみたい（×重たそうなのでやめ）
・一致長の頻度表にもう少し工夫が必要
　実際には絶対に登場しないような符号が入れられるようになっており、
　圧縮率低下につながる。
　「一致長０」はいかなる場合においても絶対に出てこない。
　また、最大一致長もコードの最大サイズにより決められる。
　（上記２つは実装済み）
　さらに、内容が同じ物の一致はコード番号の小さい方が優先されるので、
　コード番号の大きい方は最小一致長も計算することが出来る。
　コードごとに一致長の頻度表を構築するとよさげ。
　（×一致長の概念をつぶしてコードだけにする予定）

・現在、バイト単位でバッファリングしているが、
　出来ればビット単位にしたい。
　多分１ビットずつでＯＫ。
　上位ビットから入れるようにすれば一括フラッシュや桁上がり処理もラクチン。
　（×めんどいし、レンジはもともとバイト出力みたいなので。）

・現在は適応型だが、最初に固定の頻度表を入れて合わせ技にしたい。
　【変更案その１・
　　どれかの登場数が255回になるまでの頻度表をファイルに入れておき、
　　その頻度表に入っている分（登場数を合計したサイズ）までは固定型。
　　そっから先は全要素の登場頻度に１を加えて適応型に移行、こんな感じ。】
　【変更案その２・
　　データの初めから１６キロバイト（サイズは任意）までの頻度表を作ってファイルに挿入。
　　上述したものと同じバイト数（上の例なら１６キロバイト）のリングバッファを
　　あらかじめ用意、中に固定頻度表に入れた分（＝リングバッファのサイズ）までの
　　データをコピーして初期化しておく。
　　（現在はこれに似たことをやってます）

　　その１と同じく、固定頻度表に入れた分だけ固定型で符号化した後、適応型に移行する。
　　適応型に切り替わった後は、以下の１と２をデータの終わりまで繰り返す。
　　　１．リングバッファで一番古いデータの登場頻度を１減らす。
　　　２．符号化したデータを、スライド辞書の容量でリングの末尾に追加する。
　　古いデータを破棄するため、データの遷移に柔軟に対応できるようになると思います。】

LZW部分
・処理速度が遅い
・辞書構築のため、二重に検索している。
　これら２つとも、ツリー検索を使えば何とかなりそう。
　（追記・上２つの解決法は分かったが、今のやつを書き換えるのは面倒。
　　　　　やはり作り直すときに。）
・辞書コード数が65536個に到達した地点で辞書の更新が止まる。
　コード数を無限にするか、適当なところからあぼーんするか…
　（追記・LZT符号にする予定）
・一致長に０は入らないため、最大辞書サイズを１バイトだけあげられるはず。

その他
・相性が良さそうならブロックソートやMTF法を導入してみる。
　（×なんか相性悪そう）
・ストリーミング対応
　（作り直すときに）
・何か原因不明のエラー出るよ。
　モデル化データがある程度以上でかいと起こるようです、オーバーフロー？
　多分一から組み直したら直るでしょう。
　（追記・頻度表の動的更新が原因みたいです）
　（追記・上の変更案その２で解決しました。）
